import customtkinter as ctk
import pandas as pd
from tkinter import ttk, filedialog, simpledialog, messagebox, font
import tkinter as tk


class DataModel:
    def __init__(self, dataframe):
        self.df = dataframe

    def remove_field(self, field_name):
        if field_name in self.df.columns:
            self.df.drop(columns=[field_name], inplace=True)
            return True
        return False

    def rename_field(self, old_name, new_name):
        if old_name in self.df.columns:
            self.df.rename(columns={old_name: new_name}, inplace=True)
            return True
        return False

    def add_field(self, field_name):
        self.df[field_name] = pd.NA

    def merge_fields(self, field1, field2, new_field):
        if field1 in self.df.columns and field2 in self.df.columns:
            self.df[new_field] = self.df[field1].astype(str) + "-" + self.df[field2].astype(str)
            return True
        return False

# A frame for creating and managing conditions for data manipulation
class ConditionFrame:
    def __init__(self, parent, df_columns, show_logical_operator=False):
        self.frame = ctk.CTkFrame(parent, fg_color="#2A8C55", corner_radius=0)
        self.frame.pack(fill='x', padx=10, pady=5)  # Abstand vom Rand des Frames

        # Display dropdown for logical operator if more than one condition is present
        if show_logical_operator:
            self.logical_operator_var = tk.StringVar(value="AND")
            logical_operator_dropdown = ctk.CTkOptionMenu(
                self.frame, variable=self.logical_operator_var, values=["AND", "OR"],
                fg_color="#207244", dropdown_hover_color="#15462a")
            logical_operator_dropdown.pack(side='left', padx=5)

        # Dropdown for selecting the field for the condition
        self.field_var = tk.StringVar(value="Choose a field")
        field_dropdown = ctk.CTkOptionMenu(
            self.frame, variable=self.field_var, values=["Choose a field"] + df_columns,
            fg_color="#207244", dropdown_hover_color="#15462a")
        field_dropdown.pack(side='left', padx=5)

        # Dropdown for selecting the operator for the condition
        self.operator_var = tk.StringVar(value="=")
        operator_dropdown = ctk.CTkOptionMenu(
            self.frame, variable=self.operator_var, values=["=", "!=", ">", "<", ">=", "<="],
            fg_color="#207244", dropdown_hover_color="#15462a")
        operator_dropdown.pack(side='left', padx=5)

        # Entry field for the value of the condition
        self.value_var = tk.StringVar()
        self.value_entry = ctk.CTkEntry(self.frame, textvariable=self.value_var, fg_color="#207244")
        self.value_entry.pack(side='left', padx=5)

        # Button to delete the condition
        delete_button = ctk.CTkButton(
            self.frame, text="LÃ¶schen", command=self.frame.destroy, fg_color="#207244")
        delete_button.pack(side='left', padx=30)

    def get_condition(self):
        condition = {
            'field': self.field_var.get(),
            'operator': self.operator_var.get(),
            'value': self.value_var.get()
        }

        # Add the logical operator to the condition if defined
        if hasattr(self, 'logical_operator_var'):
            condition['logical_operator'] = self.logical_operator_var.get()
        else:
            condition['logical_operator'] = 'AND'

        return condition

class DataManipulationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Data Manipulation App")
        self.root.state('zoomed')
        self.apply_styles()
        self.create_widgets()
        self.df = None
        self.condition_frames = []

    def apply_styles(self):
        self.root.configure(background="#ffffff")
        ctk.set_appearance_mode("System")

    def create_widgets(self):
        # Sidebar for manipulation buttons
        self.sidebar_frame = ctk.CTkFrame(self.root, fg_color="#15462a", width=180, height=650, corner_radius=0)
        self.sidebar_frame.pack_propagate(0)
        self.sidebar_frame.pack(fill="y", anchor="w", side="left")

        # Top frame for additional UI components like conditional UI
        self.top_frame = ctk.CTkFrame(self.root, fg_color="#207244", height=100, corner_radius=0)
        self.sidebar_frame.pack_propagate(0)
        self.top_frame.pack(fill="x", anchor="w", side="top")

        self.add_manipulation_buttons()

        # Treeview for displaying DataFrame
        self.tree = ttk.Treeview(self.root, columns=(), show="headings")
        self.tree.pack(side=ctk.LEFT, fill=ctk.BOTH, expand=True)

        # Scrollbar for the treeview
        scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=self.tree.yview)
        scrollbar.pack(side=ctk.RIGHT, fill=ctk.Y)
        self.tree.configure(yscrollcommand=scrollbar.set)

        self.conditional_ui_frame = None

    def add_manipulation_buttons(self):
        button_texts = ["Import Data", "Remove Field", "Rename Field", "Add Field", "Merge Fields", "Conditional Update"]
        button_commands = [self.import_data, self.remove_field, self.rename_field, self.add_field, self.merge_fields, self.create_conditional_ui]

        for text, command in zip(button_texts, button_commands):
            ctk.CTkButton(self.sidebar_frame, text=text, fg_color="transparent", command=command, corner_radius=32, font=("Arial Bold", 14),
                          hover_color="#207244", anchor="w").pack(anchor="center", ipady=5, pady=(16, 0))

    def import_data(self):
        file_path = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv"), ("Excel Files", "*.xlsx")])
        if file_path:
            if file_path.endswith(".csv"):
                self.df = pd.read_csv(file_path)
            elif file_path.endswith(".xlsx"):
                self.df = pd.read_excel(file_path)
            else:
                messagebox.showerror("Error", "Unsupported file format. Please select a CSV or Excel file.")
                return

            # copy of data set in case of resetting
            self.original_df = self.df.copy()
            self.display_data()
    def display_data(self):
        self.tree.delete(*self.tree.get_children())
        columns = [str(col) for col in self.df.columns]
        self.tree["columns"] = columns
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=font.Font().measure(col) + 10)

        for _, row in self.df.iterrows():
            row_values = [str(val) for val in row]
            self.tree.insert("", tk.END, values=row_values)

    def remove_field(self):
        if self.df is None or self.df.empty:
            messagebox.showerror("Error", "No data loaded.")
            return

        if self.df is not None:
            field = simpledialog.askstring("Remove Field", "Enter field name to remove:")
            manipulator = DataModel(self.df)
            if manipulator.remove_field(field):
                self.display_data()
            else:
                messagebox.showerror("Error", "Field not found in dataset.")

    def rename_field(self):
        if self.df is None or self.df.empty:
            messagebox.showerror("Error", "No data loaded.")
            return

        if self.df is not None:
            old_name = simpledialog.askstring("Rename Field", "Enter current field name:")
            new_name = simpledialog.askstring("Rename Field", "Enter new field name:")
            manipulator = DataModel(self.df)
            if manipulator.rename_field(old_name, new_name):
                self.display_data()
            else:
                messagebox.showerror("Error", "Field not found in dataset.")

    def add_field(self):
        if self.df is None or self.df.empty:
            messagebox.showerror("Error", "No data loaded.")
            return

        if self.df is not None:
            new_field = simpledialog.askstring("Add Field", "Enter new field name:")
            if new_field:
                manipulator = DataModel(self.df)
                manipulator.add_field(new_field)
                self.display_data()

    def merge_fields(self):
        if self.df is None or self.df.empty:
            messagebox.showerror("Error", "No data loaded.")
            return

        if self.df is not None:
            field1 = simpledialog.askstring("Merge Fields", "Enter first field name:")
            field2 = simpledialog.askstring("Merge Fields", "Enter second field name:")
            new_field = simpledialog.askstring("Merge Fields", "Enter new field name:")
            manipulator = DataModel(self.df)
            if manipulator.merge_fields(field1, field2, new_field):
                self.display_data()
            else:
                messagebox.showerror("Error", "One or both fields not found in dataset.")

    def create_conditional_ui(self):
        if self.conditional_ui_frame:
            if self.conditional_ui_frame.winfo_viewable():
                self.conditional_ui_frame.pack_forget()
            else:
                self.conditional_ui_frame.pack(fill="x", expand=True)
            return

        if self.df is None or self.df.empty:
            messagebox.showerror("Error", "No data loaded.")
            return

        self.conditional_ui_frame = ctk.CTkFrame(self.top_frame, fg_color="#2A8C55")
        self.conditional_ui_frame.pack(fill="x", expand=True)

        button_container = ctk.CTkFrame(self.conditional_ui_frame, fg_color="#2A8C55")
        button_container.pack(fill='x', pady=10)

        add_condition_button = ctk.CTkButton(button_container, text="Add Condition",
                                             command=self.add_new_condition, fg_color="#207244", hover_color="#15462a")
        add_condition_button.pack(side='left', padx=5)

        # Apply Button
        apply_button = ctk.CTkButton(button_container, text="Apply",
                                     command=self.apply_conditions, fg_color="#207244", hover_color="#15462a")
        apply_button.pack(side='left', padx=5)

        # Reset Button
        reset_button = ctk.CTkButton(button_container, text="Reset Conditions",
                                     command=self.reset_conditions, fg_color="#207244", hover_color="#15462a")
        reset_button.pack(side='left', padx=5)

        self.add_new_condition()

        self.conditional_ui_frame.pack(fill="x", expand=True)

    def reset_conditions(self):
        for condition_frame in self.condition_frames:
            if isinstance(condition_frame, ConditionFrame):
                condition_frame.frame.destroy()
        self.condition_frames.clear()
        self.df = self.original_df.copy()
        self.display_data()
        self.add_new_condition()
    def add_new_condition(self):
        show_logical_operator = len(self.condition_frames) > 0
        condition_frame = ConditionFrame(self.conditional_ui_frame, list(self.df.columns), show_logical_operator)
        self.condition_frames.append(condition_frame)

    def collect_conditions(self):
        self.conditions = [cf.get_condition() for cf in self.condition_frames if isinstance(cf, ConditionFrame)]

    def apply_conditions(self):
        self.collect_conditions()
        if not self.original_df.empty and self.conditions:
            query = self.build_query()
            self.df = self.df.query(query)
            self.display_data()

    def build_query(self):
        query_parts = []
        for i, condition in enumerate(self.conditions):
            field = condition['field']
            if not field.isidentifier():
                field = f"`{field}`"

            value = condition['value']
            if isinstance(value, str) and not value.isnumeric():
                value = f"'{value}'"

            operator = '==' if condition['operator'] == '=' else condition['operator']

            if i > 0:
                logical_operator = condition['logical_operator']
                logical_op_symbol = '&' if logical_operator == 'AND' else '|'
                query_parts.append(f" {logical_op_symbol} ")

            query_parts.append(f"{field} {operator} {value}")

        query_string = "".join(query_parts)
        return query_string

def main():
    root = ctk.CTk()
    app = DataManipulationApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
